{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }

  /*====================================
  START COLLECTION FILTERS & GRID STYLING
  ======================================*/

  .collection-hero__title {
    margin: 25px 0;
    font-size: 40px;
    font-weight: 400;
    color: black;
  }

  .sorting-wrapper {
    display: flex;
    flex-direction: column;
    width: 100%;
    align-items: flex-end;
  }

  .child-sorting-wrapper {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    max-width: 350px;
  }

  .sort-dropdown {
    position: relative;
    display: inline-block;
  }

  .sort-button {
    background-color: #007bff;
    color: white;
    padding: 10px;
    border: none;
    cursor: pointer;
    border-radius: 4px;
  }

  .sort-content {
    display: none;
    position: absolute;
    background-color: #f9f9f9;
    min-width: 160px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
  }

  .sort-content a {
    color: black;
    padding: 12px 16px;
    text-decoration: none;
    display: block;
  }

  .sort-content a:hover {
    background-color: #f1f1f1;
  }

  .sort-dropdown:hover .sort-content {
    display: block;
  }

  .collection-filters-wrapper {
    display: flex;
    {%- if section.settings.enable_filtering and section.settings.filter_type == "vertical" -%}
      flex-direction: row;
    {%- elsif section.settings.enable_filtering and section.settings.filter_type == "horizontal" -%}
      flex-direction: column;
    {% else %}
      flex-direction: column;
    {%- endif -%}
  }

  .filters-sidebar {
    margin-bottom: 20px;
    width: 250px;
    margin-right: 30px;
    flex-shrink: 0;
  }

  .facets__disclosure-vertical summary {
    padding: 16.5px 17.5px 16.5px 0px;
  }

  .filter-section h3 {
    margin-bottom: 10px;
    padding-top: 15px;
    border-top: 1px solid #ccc;
  }

  .product-grid-container {
    width: 100%;
    margin-top: 16px;
  }

  .product-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 10px;
  }

  .filter-dropdown {
    position: relative;
    display: inline-block;
  }

  .filter-button {
    background-color: #f9f9f9;
    color: black;
    padding: 10px;
    font-size: 16px;
    border: none;
    cursor: pointer;
  }

  .filter-content {
    position: absolute;
    background-color: #f9f9f9;
    min-width: 300px;
    max-height: 400px;
    overflow-y: auto;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
  }

  .filter-content ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
  }

  .filter-content ul li {
    padding: 8px 16px;
  }

  .filter-content ul li a {
    color: black;
    text-decoration: none;
    display: block;
  }

  .filter-content ul li a:hover {
    background-color: #ddd;
  }

  .facet-filters__label {
    display: block;
    color: rgba(var(--color-foreground), .85);
    font-size: 14px;
    margin: 0 20px 0 0;
    font-weight: 400;
  }

  .facet-filters__field {
    display: flex;
    align-items: center;
  }

  .facets__heading {
    display: block;
    color: rgba(var(--color-foreground), .85);
    font-size: 14px;
    margin-bottom: 15px;
    font-weight: 400;
    letter-spacing: 0.5px;
  }

  .filter-section {
    border-top: 1px solid rgba(var(--color-foreground), .1);
    margin-right: 0;
  }

  .collection-filters-wrapper summary {
    list-style: none;
    cursor: pointer;
    position: relative;
  }

  .collection-filters-wrapper summary:hover {
    text-decoration: underline;
    color: rgba(var(--color-foreground), 1);
  }

  .collection-filters-wrapper summary span{
    font-size: 14px;
  }

  .facets__display-vertical {
    display: flex;
    flex-direction: column;
    padding: 6px 12px 25px 0px;
  }

  .facets__label:hover,
  .facets__label:has(:focus-visible) {
    color: rgba(var(--color-foreground), 1);
  }

  .facet-checkbox {
    padding: 10px 20px 10px 0;
    flex-grow: 1;
    position: relative;
    font-size: 14px;
    display: flex;
    align-items: center;
    word-break: break-word;
    cursor: pointer;
  }

  .facet-checkbox:hover {
    color: rgba(var(--color-foreground),1);
    text-decoration: underline;
  }

  .facet-checkbox input[type=checkbox] {
    margin-right: 12px;
    position: absolute;
    opacity: 0;
    width: 16px;
    height: 16px;
    top: 7px;
    left: -4px;
  }

  .facet-checkbox>svg, .facet-checkbox>.svg-wrapper {
    background-color: rgb(var(--color-background));
    margin-right: 12px;
    flex-shrink: 0;
  }

  .facet-checkbox .svg-wrapper {
    visibility: hidden;
    position: absolute;
    left: 3px;
    z-index: 5;
    top: 9px;
    width: 11px;
    height: 7px;
  }

  .facet-checkbox>input[type=checkbox]:checked~.svg-wrapper>.icon-checkmark {
    visibility: visible;
  }

  .facet-filters__sort {
    background-color: transparent;
    border: 0;
    border-radius: 0;
    font-size: 14px;
    height: auto;
    margin: 0;
    padding-left: 0;
    padding-right: 17px;
    cursor: pointer;
    color: rgba(var(--color-foreground),.75);
  }

  .facets__disclosure-vertical details[open] summary .icon-caret {
    transform: rotate(180deg);
  }

  .facets__disclosure-vertical summary .icon-caret {
    position: absolute;
    height: 6px;
    right: 0px;
    top: calc(50% - 2px);
  }

  .reset-button {
    text-transform: capitalize;
    color: rgba(var(--color-foreground),.75);
    margin-left: 10px;
  }

  /* .facets__disclosure-vertical details[open] .facets__display-vertical {
    animation: animateMenuOpen .2s ease;
  } */

  .filters__show-more {
    background: white;
    border: 1px solid;
    padding: 10px 5px;
    cursor: pointer;
    margin-top: 15px;
    outline: 1px solid transparent;
  }

  .filters__show-more:hover {
    outline: 1px solid black;
  }

  @media screen and (max-width: 990px) {
    .product-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  @media screen and (max-width: 750px) {
    .small-hide {
      display: none !important;
    }
  }

  @keyframes animateMenuOpen {
    0% {
      opacity: 0;
      transform: translateY(-1.5rem);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /*====================================
  END COLLECTION FILTERS & GRID STYLING
  ======================================*/

  /*=========================
  START PRODUCT CARD STYLING
  ===========================*/
  .product-image {
    width: 100%;
    height: unset;
    max-height: 250px;
    object-fit: cover;
    margin-bottom: 10px;
  }

  .product-brand {
    font-size: 0.9em;
    color: #666;
  }

  .product-name {
    font-weight: bold;
    margin: 5px 0;
  }

  .product-price {
    font-weight: bold;
  }

  .product-original-price {
    text-decoration: line-through;
    color: #666;
    margin-right: 5px;
  }

  /*=======================
  END PRODUCT CARD STYLING
  =========================*/
{%- endstyle -%}

<div class="color-{{ section.settings.color_scheme }} page-width">
  <div class="collection-hero color-{{ section.settings.color_scheme }}">
    <div class="collection-hero__text-wrapper">
      <h1 class="collection-hero__title">{{ collection.title }}</h1>
    </div>
  </div>
  <div class="collection-info-wrapper section-{{ section.id }}-padding">
    <collection-info
      data-section="{{ section.id }}"
    >
      <div>
        {%- paginate collection.products by section.settings.products_per_page -%}
          <form id="collection-form" class="main-content">
            <div class="sorting-wrapper">
              <div class="child-sorting-wrapper">
                {%- if section.settings.enable_sorting -%}
                  {%- assign sort_by = collection.sort_by | default: collection.default_sort_by -%}
                  <div class="facet-filters__field">
                    <h2 class="facet-filters__label">
                      <label for="SortBy">Sort by:</label>
                    </h2>
                    <select
                      data-render-section
                      name="sort_by"
                      id="SortBy"
                      class="facet-filters__sort"
                    >
                      {%- for option in collection.sort_options -%}
                        <option
                          value="{{ option.value | escape }}"
                          {% if option.value == sort_by %}
                            selected="selected"
                          {% endif %}
                        >
                          {{ option.name | escape }}
                        </option>
                      {%- endfor -%}
                    </select>
                  </div>
                {%- endif -%}
                <div class="results-count">
                  {%- if collection.products_count == collection.all_products_count -%}
                    {{ collection.products_count }} products
                  {% else %}
                    {{ collection.products_count }} of {{ collection.all_products_count }}
                  {% endif %}
                </div>
              </div>
            </div>
            <div class="collection-filters-wrapper">
              {%- if section.settings.enable_filtering -%}
                {% render 'filters',
                  results: collection,
                  collapse_filters: section.settings.collapse_filters,
                  filter_type: section.settings.filter_type
                %}
              {% endif %}

              <div id="ProductGridContainer" class="product-grid-container">
                {%- if section.settings.enable_filtering -%}
                  <div class="filters">
                    {% liquid
                      assign has_active_filters = false
                      for f in collection.filters
                        if f.active_values.size > 0
                          assign has_active_filters = true
                        endif
                      endfor
                    %}

                    {% if has_active_filters %}
                      <div class="filter">
                        Clear all filters
                        <span class="filter-close" data-render-section-url="{{ collection.url }}">×</span>
                      </div>
                    {% endif %}

                    {%- for f in collection.filters -%}
                      {% for v in f.active_values %}
                        <div class="filter">
                          {{ f.label | escape }}: {{ v.label | escape -}}
                          <span
                            class="filter-close"
                            data-render-section-url="{{ v.url_to_remove }}"
                            >×
                          </span>
                        </div>
                      {% endfor %}
                    {%- endfor -%}
                  </div>
                {% endif %}
                <div class="product-grid">
                  {%- if collection.products.size == 0 -%}
                    <p>Nothing Here</p>
                  {%- else -%}
                    {%- for product in collection.products -%}
                      {% render 'card-product',
                        card_product: product,
                        show_vendor: section.settings.show_vendor,
                        enable_swatches: section.settings.enable_swatches,
                        swatch_trigger: section.settings.swatch_trigger,
                        swatch_type: section.settings.swatch_type
                      %}
                    {%- endfor -%}
                  {%- endif -%}
                </div>
                {%- if paginate.pages > 1 -%}
                  {% render 'pagination', paginate: paginate, anchor: '' %}
                {%- endif -%}
              </div>
            </div>
          </form>
        {%- endpaginate -%}
      </div>
    </collection-info>
  </div>
</div>

<script type="text/javascript">
  function debounce(fn, wait) {
    let t;
    return (...args) => {
      clearTimeout(t);
      t = setTimeout(() => fn.apply(this, args), wait);
    };
  }

  if (!customElements.get('collection-info')) {
    customElements.define(
      'collection-info',
      class CollectionInfo extends HTMLElement {
        constructor() {
          super();
          this.debounceOnChange = debounce((event) => this.onChangeHandler(event), 800);
          this.addEventListener('change', this.debounceOnChange.bind(this));
          this.addEventListener('click', this.onClickHandler.bind(this));
        }

        onSwatchClick(event) {
          const swatch = event.target;
          if (!swatch || swatch.classList.contains('swatch-disabled')) return;
          const productCard = swatch.closest('.product-card');
          if (!productCard) return;
          // Remove selected class from all swatches in this product card
          productCard.querySelectorAll('.color-swatch').forEach((s) => s.classList.remove('selected'));
          // Add selected class to clicked swatch
          swatch.classList.add('selected');
          const productId = productCard.dataset.productId;
          const productImage = productCard.querySelector(`[data-product-image="${productId}"]`);
          const newImageUrl = swatch.dataset.variantImage;
          if (productImage && newImageUrl) {
            productImage.src = newImageUrl;
          }
        }

        onClickHandler = (event) => {
          if (event.target.matches('[data-render-section-url]')) {
            event.preventDefault();
            const searchParams = new URLSearchParams(event.target.dataset.renderSectionUrl.split('?')[1]).toString();
            this.fetchSection(searchParams);
          } else if (event.target.matches('[data-swatch]')) {
            this.onSwatchClick(event);
          }
        };

        onChangeHandler = (event) => {
          if (!event.target.matches('[data-render-section]')) return;

          const formData = new FormData(this.form);
          const searchParams = new URLSearchParams(formData).toString();
          this.fetchSection(searchParams);
        };

        get form() {
          return this.querySelector('collection-info form');
        }

        updateSection = (responseHtml) => {
          const gridFromFetchInnerHtml = responseHtml.getElementById('ProductGridContainer').innerHTML;
          const gridFromDom = document.getElementById('ProductGridContainer');

          gridFromDom.innerHTML = gridFromFetchInnerHtml;

          const filtersFromFetch = responseHtml.querySelectorAll('#collection-form .js-filter');
          const filtersFromDom = document.querySelectorAll('#collection-form .js-filter');

          // Remove filters that are no longer returned from the server
          Array.from(filtersFromDom).forEach((currentElement) => {
            if (!Array.from(filtersFromFetch).some(({ id }) => currentElement.id === id)) {
              currentElement.remove();
            }
          });

          Array.from(filtersFromFetch).forEach((elementToRender, index) => {
            document.getElementById(elementToRender.id).innerHTML = elementToRender.innerHTML;
          });
        };

        fetchSection = (searchParams) => {
          console.log(searchParams.split('&'));
          fetch(`${window.location.pathname}?section_id=${this.dataset.section}&${searchParams}`)
            .then((response) => response.text())
            .then((responseText) => {
              history.pushState({}, '', `${window.location.pathname}?${searchParams}`);
              let responseHtml = new DOMParser().parseFromString(responseText, 'text/html');
              this.updateSection(responseHtml);
            });
        };
      }
    );
  }
</script>

{% schema %}
{
  "name": "t:sections.main-collection-product-grid.name",
  "class": "section",
  "settings": [
    {
      "type": "range",
      "id": "products_per_page",
      "min": 8,
      "max": 36,
      "step": 4,
      "default": 16,
      "label": "t:sections.main-collection-product-grid.settings.products_per_page.label"
    },
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 1,
      "max": 6,
      "step": 1,
      "default": 4,
      "label": "t:sections.main-collection-product-grid.settings.columns_desktop.label"
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "info": "t:sections.all.colors.has_cards_info",
      "default": "scheme-1"
    },
    {
      "type": "header",
      "content": "t:sections.main-collection-product-grid.settings.header__3.content"
    },
    {
      "type": "select",
      "id": "image_ratio",
      "options": [
        {
          "value": "adapt",
          "label": "t:sections.main-collection-product-grid.settings.image_ratio.options__1.label"
        },
        {
          "value": "portrait",
          "label": "t:sections.main-collection-product-grid.settings.image_ratio.options__2.label"
        },
        {
          "value": "square",
          "label": "t:sections.main-collection-product-grid.settings.image_ratio.options__3.label"
        }
      ],
      "default": "adapt",
      "label": "t:sections.main-collection-product-grid.settings.image_ratio.label"
    },
    {
      "type": "select",
      "id": "image_shape",
      "options": [
        {
          "value": "default",
          "label": "t:sections.all.image_shape.options__1.label"
        },
        {
          "value": "arch",
          "label": "t:sections.all.image_shape.options__2.label"
        },
        {
          "value": "blob",
          "label": "t:sections.all.image_shape.options__3.label"
        },
        {
          "value": "chevronleft",
          "label": "t:sections.all.image_shape.options__4.label"
        },
        {
          "value": "chevronright",
          "label": "t:sections.all.image_shape.options__5.label"
        },
        {
          "value": "diamond",
          "label": "t:sections.all.image_shape.options__6.label"
        },
        {
          "value": "parallelogram",
          "label": "t:sections.all.image_shape.options__7.label"
        },
        {
          "value": "round",
          "label": "t:sections.all.image_shape.options__8.label"
        }
      ],
      "default": "default",
      "label": "t:sections.all.image_shape.label",
      "info": "t:sections.all.image_shape.info"
    },
    {
      "type": "checkbox",
      "id": "show_secondary_image",
      "default": false,
      "label": "t:sections.main-collection-product-grid.settings.show_secondary_image.label"
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "default": false,
      "label": "t:sections.main-collection-product-grid.settings.show_vendor.label"
    },
    {
      "type": "checkbox",
      "id": "show_rating",
      "default": false,
      "label": "t:sections.main-collection-product-grid.settings.show_rating.label",
      "info": "t:sections.main-collection-product-grid.settings.show_rating.info"
    },
    {
      "type": "select",
      "id": "quick_add",
      "default": "none",
      "label": "t:sections.main-collection-product-grid.settings.quick_add.label",
      "info": "t:sections.main-collection-product-grid.settings.quick_add.info",
      "options": [
        {
          "value": "none",
          "label": "t:sections.main-collection-product-grid.settings.quick_add.options.option_1"
        },
        {
          "value": "standard",
          "label": "t:sections.main-collection-product-grid.settings.quick_add.options.option_2"
        },
        {
          "value": "bulk",
          "label": "t:sections.main-collection-product-grid.settings.quick_add.options.option_3"
        }
      ]
    },
    {
      "type": "checkbox",
      "id": "enable_swatches",
      "default": true,
      "label": "Enable swatches",
      "info": "Show variant swatches on product cards"
    },
    {
      "type": "select",
      "id": "swatch_type",
      "label": "Swatch type",
      "options": [
        {
          "value": "color",
          "label": "Color based"
        },
        {
          "value": "image",
          "label": "Image based"
        }
      ],
      "default": "image",
      "info": "Display swatches based on color values or variant images"
    },
    {
      "type": "text",
      "id": "swatch_trigger",
      "label": "Swatch trigger",
      "default": "Color",
      "info": "Enter the product option name to use for variant swatches (e.g. 'Color', 'Size', etc.)"
    },
    {
      "type": "header",
      "content": "t:sections.main-collection-product-grid.settings.header__1.content"
    },
    {
      "type": "checkbox",
      "id": "enable_filtering",
      "default": true,
      "label": "t:sections.main-collection-product-grid.settings.enable_filtering.label",
      "info": "t:sections.main-collection-product-grid.settings.enable_filtering.info"
    },
    {
      "type": "select",
      "id": "filter_type",
      "options": [
        {
          "value": "horizontal",
          "label": "t:sections.main-collection-product-grid.settings.filter_type.options__1.label"
        },
        {
          "value": "vertical",
          "label": "t:sections.main-collection-product-grid.settings.filter_type.options__2.label"
        },
        {
          "value": "drawer",
          "label": "t:sections.main-collection-product-grid.settings.filter_type.options__3.label"
        }
      ],
      "default": "horizontal",
      "label": "t:sections.main-collection-product-grid.settings.filter_type.label",
      "info": "t:sections.main-collection-product-grid.settings.filter_type.info"
    },
    {
      "type": "checkbox",
      "id": "collapse_filters",
      "default": true,
      "label": "Collapse filters by default"
    },
    {
      "type": "checkbox",
      "id": "enable_sorting",
      "default": true,
      "label": "t:sections.main-collection-product-grid.settings.enable_sorting.label"
    },
    {
      "type": "header",
      "content": "t:sections.main-collection-product-grid.settings.header_mobile.content"
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "default": "2",
      "label": "t:sections.main-collection-product-grid.settings.columns_mobile.label",
      "options": [
        {
          "value": "1",
          "label": "t:sections.main-collection-product-grid.settings.columns_mobile.options__1.label"
        },
        {
          "value": "2",
          "label": "t:sections.main-collection-product-grid.settings.columns_mobile.options__2.label"
        }
      ]
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ]
}
{% endschema %}
