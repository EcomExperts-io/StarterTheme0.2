{%- style -%}
  /* PRICE RANGE FILTER STYLING */

  .price-input-container {
    width: 100%;
  }

  .price-input .price-field {
    display: flex;
    margin-bottom: 22px;
  }

  .price-field input {
    height: 35px;
    font-size: 15px;
    border-radius: 9px;
    text-align: center;
    border: 0px;
    background: #e4e4e4;
    width: 50px;
  }

  .price-input {
    width: 100%;
    font-size: 14px;
    color: #555;
    display: flex;
    justify-content: space-between;
  }

  input::-webkit-outer-spin-button,
  input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  .slider-container {
    width: 100%;
  }

  .slider-container {
    height: 6px;
    position: relative;
    background: #e4e4e4;
    border-radius: 5px;
  }

  .slider-container .price-slider {
    height: 100%;
    left: 0%;
    right: 0%;
    position: absolute;
    border-radius: 5px;
    background: #000;
  }

  .range-input {
    position: relative;
  }

  .range-input input {
    position: absolute;
    width: 100%;
    height: 5px;
    background: none;
    top: -5px;
    pointer-events: none;
    cursor: pointer;
    -webkit-appearance: none;
  }

  /* Styles for the range thumb in WebKit browsers */
  input[type='range']::-webkit-slider-thumb {
    height: 18px;
    width: 18px;
    border-radius: 70%;
    background: #555;
    pointer-events: auto;
    -webkit-appearance: none;
  }

  @media screen and (max-width: 768px) {
    .price-range-main {
      width: 80%;
      margin-right: 5px;
    }

    .price-range-subcontainer {
      width: 100%;
      left: 0;
      padding: 0 10px;
    }

    .projtitle {
      width: 100%;
      position: relative;
      right: 26px;
    }

    .price-input {
      flex-direction: column;
      align-items: center;
    }

    .price-field {
      margin-bottom: 10px;
    }
  }

  /*====================================
  END OF PRICE RANGE FILTER STYLING
  ======================================*/
{%- endstyle -%}

<price-range>
  <div class="price-range-main" currency-symbol="{{ cart.currency.symbol }}">
    <div class="price-range-subcontainer">
      <div class="price-input-container">
        <div class="price-input">
          <div class="price-field">
            <span class="min_price">{{ cart.currency.symbol }}0</span>
          </div>
          <div class="price-field">
            <span class="max_price">{{ filter.range_max | money | strip_html | escape }}</span>
          </div>
        </div>
        <div class="slider-container">
          <div class="price-slider"></div>
        </div>
      </div>
      <div class="range-input">
        <input
          type="range"
          class="min-range"
          min="0"
          max="{{ filter.range_max | money_without_currency }}"
          {%- if filter.min_value.value -%}
            value="{{ filter.min_value.value | money_without_currency }}"
          {%- else -%}
            value="0"
          {%- endif -%}
          step="1"
          name="{{ filter.min_value.param_name }}"
          data-render-section
        >
        <input
          type="range"
          class="max-range"
          min="0"
          max="{{ filter.range_max | money_without_currency  }}"
          {%- if filter.max_value.value -%}
            value="{{ filter.max_value.value | money_without_currency }}"
          {%- else -%}
            value="{{ filter.range_max | money_without_currency }}"
          {%- endif -%}
          step="1"
          name="{{ filter.max_value.param_name }}"
          data-render-section
        >
      </div>
    </div>
  </div>
</price-range>
<script>
  class PriceRange extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      this.rangeInputs = this.querySelectorAll('.range-input input');
      this.rangeSlider = this.querySelector('.slider-container .price-slider');
      this.minPriceText = this.querySelector('.min_price');
      this.maxPriceText = this.querySelector('.max_price');
      this.currencySymbol = this.querySelector('.price-range-main').getAttribute('currency-symbol');
      this.init();
    }

    init() {
      const urlParams = new URLSearchParams(window.location.search);
      const urlMin = urlParams.get('filter.v.price.gte');
      const urlMax = urlParams.get('filter.v.price.lte');

      const minVal = urlMin ? parseInt(urlMin, 10) : parseInt(this.rangeInputs[0].value, 10);
      const maxVal = urlMax ? parseInt(urlMax, 10) : parseInt(this.rangeInputs[1].value, 10);

      this.updateUI(minVal, maxVal);
      this.bindEvents();
    }

    bindEvents() {
      this.rangeInputs.forEach((input) => {
        input.addEventListener('input', () => {
          const newMin = parseInt(this.rangeInputs[0].value, 10);
          const newMax = parseInt(this.rangeInputs[1].value, 10);

          if (newMin <= newMax) {
            this.updateUI(newMin, newMax);
          }
        });
      });
    }

    updateUI(min, max) {
      this.minPriceText.textContent = `${this.currencySymbol}${min}`;
      this.maxPriceText.textContent = `${this.currencySymbol}${max}`;
      this.rangeSlider.style.left = `${(min / this.rangeInputs[0].max) * 100}%`;
      this.rangeSlider.style.right = `${100 - (max / this.rangeInputs[1].max) * 100}%`;
      this.rangeInputs[0].value = min;
      this.rangeInputs[1].value = max;
    }
  }

  if (!customElements.get('price-range')) {
    customElements.define('price-range', PriceRange);
  }
</script>
